name: Build and Deploy Base Image

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  schedule:
    # Rebuild weekly on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'
  workflow_dispatch:
    inputs:
      node_version:
        description: 'Node.js version to use'
        required: false
        default: '22.16.0'
        type: string
      force_rebuild:
        description: 'Force rebuild even if no changes'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: rg.fr-par.scw.cloud
  IMAGE_NAME: wildflyer/node-canvas-base

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Scaleway Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: nologin
        password: ${{ secrets.SCALEWAY_SECRET_KEY }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value={{branch}}-{{sha}},enable={{is_default_branch}}
        labels: |
          org.opencontainers.image.title=Custom Node.js Base Image
          org.opencontainers.image.description=Node.js base image with prebuilt native modules
          org.opencontainers.image.vendor=Your Company

    - name: Set Node version
      id: node-version
      run: |
        if [ "${{ github.event.inputs.node_version }}" != "" ]; then
          echo "version=${{ github.event.inputs.node_version }}" >> $GITHUB_OUTPUT
        else
          echo "version=22.16.0" >> $GITHUB_OUTPUT
        fi

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          NODE_VERSION=${{ steps.node-version.outputs.version }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        provenance: false

  test:
    needs: build
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Log in to Scaleway Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: nologin
        password: ${{ secrets.SCALEWAY_SECRET_KEY }}

    - name: Test image
      run: |
        # Pull the built image
        docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        
        # Test basic functionality
        docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest node --version
        docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest npm --version
        docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest pnpm --version
        docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest turbo --version
        
        # Test prebuilt modules
        docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest show-prebuilt-modules
        
        # Test canvas module specifically
        docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest node -e "
          const canvas = require('/opt/prebuilt-modules/node_modules/canvas');
          console.log('Canvas module loaded successfully');
          console.log('Canvas version:', canvas.version || 'unknown');
        "

  security-scan:
    needs: build
    runs-on: ubuntu-latest
    
    steps:
    - name: Log in to Scaleway Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: nologin
        password: ${{ secrets.SCALEWAY_SECRET_KEY }}

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  notify:
    needs: [build, test, security-scan]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Notify on success
      if: needs.build.result == 'success' && needs.test.result == 'success'
      run: |
        echo "✅ Base image built and tested successfully!"
        echo "Image available at: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
    
    - name: Notify on failure
      if: needs.build.result == 'failure' || needs.test.result == 'failure'
      run: |
        echo "❌ Base image build or test failed!"
        exit 1